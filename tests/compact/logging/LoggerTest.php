<?php
namespace compact\logging;

use testutils\logging\recorder\MockRecorder;
/**
 * Test class for Logger.
 * Generated by PHPUnit on 2014-11-19 at 14:50:35.
 */
class LoggerTest extends \PHPUnit_Framework_TestCase
{

    /**
     *
     * @var Logger
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->recorder = new MockRecorder();
        $this->object = new Logger($this->recorder, Logger::ALL);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {}

    /**
     * Tests Logger->flush()
     */
    public function testFlush()
    {
        $this->assertEquals("", $this->object->flush());
    }

    /**
     * Tests Logger->flush() with multiple log messages
     */
    public function testFlushMultipleLogging()
    {
        $this->object->logNormal("message");
        $this->object->logNormal("message");
        $this->assertEquals("NORMAL messageNORMAL message", $this->recorder->flush());
    }

    /**
     * Tests Logger::get()
     */
    public function testGet()
    {
        $this->assertTrue(Logger::get() instanceof Logger);
    }

    /**
     * Tests Logger::get()
     */
    public function testGetSameInstance()
    {
        $this->assertTrue(Logger::get() === $this->object, "Logger::get() must return the same instance as in this test");
    }

    /**
     * Tests Logger->getLoglevel()
     */
    public function testGetLoglevel()
    {
        $this->assertEquals(Logger::ALL, $this->object->getLoglevel());
    }

    /**
     * Tests Logger->isScreenRecorder()
     */
    public function testIsScreenRecorder()
    {
        $this->assertFalse($this->object->isScreenRecorder());
    }

    /**
     * Tests Logger->log()
     */
    public function testLog()
    {
        $this->object->logAll("message");
        
        $this->assertEquals(1, $this->recorder->countMessages());
    }

    /**
     * Tests Logger->log()
     */
    public function testLogDebug()
    {
        $this->object->logDebug("message");
        
        $this->assertEquals(1, $this->recorder->countMessages());
    }

    /**
     * Tests Logger->log()
     */
    public function testLogNormal()
    {
        $this->object->logNormal("message");
        
        $this->assertEquals(1, $this->recorder->countMessages());
    }

    /**
     * Tests Logger->log()
     */
    public function testLogFinest()
    {
        $this->object->logFinest("message");
        
        $this->assertEquals(1, $this->recorder->countMessages());
    }

    /**
     * Tests Logger->log()
     */
    public function testLogNone()
    {
        $this->object->log(Logger::NONE, "message");
        
        $this->assertEquals(0, $this->recorder->countMessages());
    }

    /**
     * Tests Logger->log()
     */
    public function testLogTooHigh()
    {
        try {
            $this->object->log(120, "asdfsaf");
            $this->fail("Exeption expected");
        } catch (\RuntimeException $ex) {}
    }

    /**
     * Tests Logger->setLoglevel()
     */
    public function testSetLoglevelLess()
    {
        $this->object->setLoglevel(Logger::WARNING);
        
        $this->assertEquals(0, $this->recorder->countMessages());
        $this->object->logFine("logFine");
        $this->assertEquals(0, $this->recorder->countMessages());
    }

    /**
     * Tests Logger->setLoglevel()
     */
    public function testSetLoglevelGreater()
    {
        $this->object->setLoglevel(Logger::WARNING);
        
        $this->assertEquals(0, $this->recorder->countMessages());
        $this->object->logError("logError");
        $this->assertEquals(1, $this->recorder->countMessages());
    }

    /**
     * Tests Logger->setLoglevel()
     */
    public function testSetLoglevelSame()
    {
        $this->object->setLoglevel(Logger::WARNING);
        
        $this->assertEquals(0, $this->recorder->countMessages());
        $this->object->logWarning("logWarning");
        $this->assertEquals(1, $this->recorder->countMessages());
    }

    /**
     * Tests Logger::isValidLogLevel()
     */
    public function testIsValidLogLevel()
    {
        $this->assertTrue(Logger::isValidLogLevel(Logger::ALL));
        $this->assertTrue(Logger::isValidLogLevel(Logger::FINEST));
        $this->assertTrue(Logger::isValidLogLevel(Logger::FINE));
        $this->assertTrue(Logger::isValidLogLevel(Logger::NORMAL));
        $this->assertTrue(Logger::isValidLogLevel(Logger::DEBUG));
        $this->assertTrue(Logger::isValidLogLevel(Logger::WARNING));
        $this->assertTrue(Logger::isValidLogLevel(Logger::ERROR));
        $this->assertTrue(Logger::isValidLogLevel(Logger::NONE));
    }

    /**
     * Tests Logger::isValidLogLevel()
     */
    public function testIsValidLogLevelFalse()
    {
        $this->assertFalse(Logger::isValidLogLevel(120));
    }

    /**
     * Tests Logger::getAsString()
     */
    public function testGetAsString()
    {
        $this->assertEquals("ALL", Logger::getAsString(Logger::ALL));
        $this->assertEquals("FINEST", Logger::getAsString(Logger::FINEST));
        $this->assertEquals("FINE", Logger::getAsString(Logger::FINE));
        $this->assertEquals("NORMAL", Logger::getAsString(Logger::NORMAL));
        $this->assertEquals("DEBUG", Logger::getAsString(Logger::DEBUG));
        $this->assertEquals("WARNING", Logger::getAsString(Logger::WARNING));
        $this->assertEquals("ERROR", Logger::getAsString(Logger::ERROR));
        $this->assertEquals("NONE", Logger::getAsString(Logger::NONE));
        $this->assertEquals("NONE", Logger::getAsString(120));
    }

    /**
     * Tests Logger::getAsInteger()
     */
    public function testGetAsInteger()
    {
        $this->assertEquals(Logger::ALL, Logger::getAsInteger("ALL"));
        $this->assertEquals(Logger::FINEST, Logger::getAsInteger("FINEST"));
        $this->assertEquals(Logger::FINE, Logger::getAsInteger("FINE"));
        $this->assertEquals(Logger::NORMAL, Logger::getAsInteger("NORMAL"));
        $this->assertEquals(Logger::DEBUG, Logger::getAsInteger("DEBUG"));
        $this->assertEquals(Logger::WARNING, Logger::getAsInteger("WARNING"));
        $this->assertEquals(Logger::ERROR, Logger::getAsInteger("ERROR"));
        $this->assertEquals(Logger::NONE, Logger::getAsInteger("NONE"));
        $this->assertEquals(- 1, Logger::getAsInteger("BOGUS"));
    }
}
